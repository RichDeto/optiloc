##### CARGA DE LIBRERIAS #####
require(rgdal)
require(sp)
require(deldir)
require(flexclust)

##### FORMULA PARA VORONOIS ####
# Fórmula modificada de "http://carsonfarmer.com/2009/09/voronoi-polygons-with-r/"
# x es un data frame de puntos de servicios, x[,1:2] son las coordenadas x e y de los centros

voronoipolygons <- function(x) {
  require(deldir)
  require(sp)
  SPP<-SpatialPoints(x[,1:2],CRS("+init=epsg:32721"))
  if (.hasSlot(SPP, 'coords')) {
    crds <- SPP@coords  
  } else crds <- SPP
  z <- deldir(crds[,1], crds[,2],rw=c(366582,858252,6127919,6671739))
  w <- tile.list(z)
  polys <- vector(mode='list', length=length(w))
  for (i in seq(along=polys)) {
    pcrds <- cbind(w[[i]]$x, w[[i]]$y)
    pcrds <- rbind(pcrds, pcrds[1,])
    polys[[i]] <- Polygons(list(Polygon(pcrds)), ID=as.character(i))
  }
  SP <- SpatialPolygons(polys,proj4string=CRS("+init=epsg:32721"))
  SPD<-SpatialPolygonsDataFrame(SP,x,match.ID=FALSE)
}            

##### ITERACIONES CON LOS CENTROS EXISTENTES#####

# las bases de entrada son "oferta" y "demanda".
# names(demanda)<-c("x","y","pondera","id_D")     ## "x" e "y" son coordenadas planas de los domicilios, "pondera" es una variable dicotómica de ponderación de los casos, "id_D" es un factor que identifica a cada caso
# names(oferta)<-c("x","y","id","cupos")   ## "x" e "y" son coordenadas planas de los centros existente, "id" es un identificador único del centro y "cupos" es la capacidad nominal del centro

##### PARAMETROS DE LAS ITERACIONES
cupos_oferta<-as.list(NA)
asignados<-as.list(NA)
voro_plot<-as.list(NA)
j<-1 # iteración actual
n<-5 # iteraciones totales
m<-4 # iteración a partir de la que se usa el segundo umbral de distancia
a<-1000 # distancia umbral para las primeras iteraciones (n > m)
b<-5000 # distancia umbral para las iteraciones a partir de m (n <= m)

# ITERACIONES
while (n>=j){
  demanda_orig<-demanda
  #   ## CREACION DEL OBJETO ESPACIAL CON LOS NIÑOS
  demanda_s<-SpatialPoints(demanda[,1:2],proj4string=CRS("+init=epsg:32721"))
  ## ENLACE ESPACIAL DE NIÑOS CON LOS VORONOIS INICIALES Y CÁLCULO DE NIÑOS CUBIERTOS POR LA OFERTA ACTUAL
  #   oferta_s<-SpatialPoints(oferta[,1:2],CRS("+init=epsg:32721"))
  #   VP_centros1<-voronoipolygons(oferta_s)
  #   VP_centros2<-SpatialPolygonsDataFrame(VP_centros1,oferta,match.ID=FALSE)
  #   voro_plot[[j]]<-VP_centros2
  VP_centros<-voronoipolygons(oferta)
  voro_plot[[j]]<-VP_centros
  #ENLACE ESPACIAL
  ab<-over(demanda_s,VP_centros)
  names(ab)<-c("x.y","y.y","id","cupos")
  names(demanda)<-c("x.x","y.x","pondera","id_D")
  demanda<-cbind(demanda,ab)
  # CÁLCULO DE DISTANCIAS ENTRE LOS NIÑOS Y LOS CENTROS
  demanda$dist_exist<-sqrt(
    ((demanda$x.x-demanda$x.y)^2)+
      ((demanda$y.x-demanda$y.y)^2))
  #DICOTÓMICA DE DISTANCIA (MENOR O IGUAL A 1000 M)
  d<-ifelse(m>j,a,b) #criterio de distancia dependiente de la iteración
  demanda$en1000_exist<-ifelse(demanda$dist_exist>=d,0,1) 
  #CONTEO DE NIÑOS POR CADA CENTRO DENTRO DEL UMBRAL DE DISTANCIA
  demanda_id<-list(tapply(X=demanda$en1000_exist, 
                          INDEX=list(demanda$id),
                          FUN=sum)) # conteo de niños asignados a cada centro educativo
  demanda_conteo<-as.data.frame(c(demanda_id))
  names(demanda_conteo)<-c("demanda_ex")
  demanda_conteo$id<-row.names(demanda_conteo)
  demanda<-merge(demanda, demanda_conteo,by="id", all.x=TRUE) # carga del dato de cantidad de niños por centro en la base de niños
  demanda<-demanda[order(demanda$id, demanda$dist_exist),] # se ordena la base por centro de pertenencia y por distancia al mismo
  remove(demanda_conteo)
  # CÁLCULO DE NIÑOS CUBIERTOS  
  lista_id = as.data.frame(sort(unique(demanda$id))) # lista de los centros que tienen niños asignados
  names(lista_id)<-c("id")
  lista_id$nid<-row.names(lista_id)
  demanda<-merge(demanda,lista_id,by="id",all.x=TRUE)
  lista_1 = vector("list", nrow(lista_id))
  for (i in 1:nrow(lista_id)) {
    lista_1[[i]]<-rank(subset(demanda,demanda$nid==i)[,"dist_exist"],ties.method="random")
  } # crea una lista de rangos (por distancia) para cada niño dentro de su centro de pertenencia 
  demanda$orden_dist<-unlist(lista_1) # asigna el rango a la base de niños
  remove(lista_1)
  demanda$a_reasig1<-ifelse(demanda$en1000_exist==1,
                            ifelse(demanda$orden_dist<=demanda$cupos,0,1),1) # aquellos cuyo rango es mayor que la cantidad de cupoos disponibles debe ser reasignado en otro paso
  ## CÁLCULO DE CUPOS UTILIZADOS 
  cubiertos<-subset(demanda,demanda$a_reasig1==0, c(x.x,y.x,pondera,id,id_D),drop=TRUE)
  cubiertos<-droplevels(cubiertos)
  cubiertos$ronda<-as.factor(j) # indica la ronda en la que se asigno al centro correspondiente
  cubiertos$uno<-1
  oferta1<-as.data.frame(tapply(X=cubiertos$uno,INDEX=list(cubiertos$id), FUN=sum))
  oferta1$tomados<-as.integer(oferta1[,1])
  oferta1$id<-as.factor(row.names(oferta1))
  oferta1<-subset(oferta1,select=c("id","tomados"))
  cupos_oferta[[j]]<-oferta1 #CUPOS DE CADA CENTRO CUBIERTOS EN CADA PASO
  oferta1<-merge(oferta,oferta1,by="id",all.x=TRUE)
  oferta1$tomados<-ifelse(is.na(oferta1$tomados),0,oferta1$tomados)
  oferta1$cupos<-oferta1$cupos-oferta1$tomados #esto corresponde al saldo no cubierto
  oferta<-subset(oferta1,oferta1$cupos>0,select=c(x,y,id,cupos),drop=TRUE) # se continua con los centros que aún tienen saldo
  oferta<-droplevels(oferta)
  remove(oferta1)
  ## NIÑOS NO CUBIERTOS
  demanda<-subset(demanda,select=c("id_D","a_reasig1"))
  demanda<-merge(demanda_orig,demanda,by="id_D",all.x=TRUE)
  demanda$a_reasig1<-ifelse(is.na(demanda$a_reasig1),1,demanda$a_reasig1)
  demanda<-subset(demanda,demanda$a_reasig1==1,select=c(x,y,pondera,id_D))
  demanda<-droplevels(demanda)
  ## LISTA DE NIÑOS YA CUBIERTOS, UN OBJETO DE LA LISTA POR CADA PASO 
  asignados[[j]]<-cubiertos
  remove(cubiertos,demanda_orig)
  j<-j+1 #cuenta la iteración
}
cupos_perdidos<-oferta
no_cubiertos<-demanda

###Desenlistado de los menores cubiertos
asignados_existentes<-as.data.frame(NULL)
for (i in 1:length(asignados)) {
  asignados_existentes<-rbind(asignados_existentes,as.data.frame(asignados[[i]]))
}
asignados_existentes<-subset(asignados_existentes,select=c(x.x,y.x,pondera,id,ronda))

###Desenlistado de los Centros
cupos_cubiertos1<-as.data.frame(NULL)
for (i in 1:length(cupos_oferta)) {
  cupos_cubiertos1<-rbind(cupos_cubiertos1,as.data.frame(cupos_oferta[[i]]))
}
cupos_cubiertos<-as.data.frame(tapply(X=cupos_cubiertos1$tomados,INDEX=cupos_cubiertos1$id, FUN=sum))
names(cupos_cubiertos)<-"cupos"
cupos_cubiertos$id<-row.names(cupos_cubiertos)

###Limpiar el ambiente
remove(i,j,n,m,a,b,d,lista_id,oferta,VP_centros,
       demanda_s,demanda_id,demanda,asignados,cupos_oferta,cupos_cubiertos1)

##### GENERACIÓN DE LOS NUEVOS CENTROS #####
#parámetros de la iteración
j<-1 #número de iteración
g1<-25 #tamaño de los grupos a crear en primera instancia
g2<-12 #tamaño de los grupos a crear en segunda instancia
d1<-1000 #primer umbral de distancia
d2<-5000 #segundo umbral de distancia
m<-9 #Número total de iteraciones
l<-8 #umbral (en interaciones) para el cambio de distancia
o<-7 #umbral (en interaciones) para el cambio de tamaño de grupos
demanda<-no_cubiertos #niños no cubiertos en la asignación a los centros existentes
# ninos$cluster<-as.factor(1) #crea una variable para la identidad del cluster
clusterizados<-as.list(NA) #lista para extraer los niños que se van asignando en cada corrida
# ITERACIONES
while(j<=m){
  distancia<-ifelse(j<=6,d1,ifelse(j<=l,d2,1/0)) #la distancia vale d1 para las primeras iteraciones, d2 para la 7 y 8 y no tiene límite para la novena
  tam<-ifelse(j<=5,g1,ifelse(j<=o,g2,1/0)) #el cupo por grupo a crear es 100 en las primeras 5 iteraciones, 50 para la 6 y 7 y la 8 y 9 no tienen límite de cupo
  k<-ifelse(is.infinite(tam),g2,ceiling(nrow(demanda)/tam))
  demanda$cluster<-as.factor(cclust(demanda[,1:2],k)@cluster)
  medianax<-as.data.frame(tapply(demanda$x,demanda$cluster,FUN=median)) # coordenada x del centro medio del cluster
  names(medianax)<-c("medianax")
  medianay<-as.data.frame(tapply(demanda$y,demanda$cluster,FUN=median)) # coordenada y del centro medio del cluster
  names(medianay)<-c("medianay")
  demanda<-merge(demanda,medianax,by.x="cluster",by.y="row.names") #se agregan las coordenadas de los centros medianos
  demanda<-merge(demanda,medianay,by.x="cluster",by.y="row.names") #se agregan las coordenadas de los centros medianos
  demanda$dist<-sqrt((demanda$x-demanda$medianax)^2+(demanda$y-demanda$medianay)^2) #distancia al centro mediano
  lista_cluster<-as.data.frame(sort(unique(demanda$cluster))) # lista de los centros que tienen niños asignados
  names(lista_cluster)<-c("cluster")
  lista_cluster$cluster<-row.names(lista_cluster)
  demanda<-merge(demanda,lista_cluster,by="cluster")
  lista_1<-vector("list", nrow(lista_cluster))             
  for (i in 1:nrow(lista_cluster)) {
    lista_1[[i]]<-rank(subset(demanda,demanda$cluster==i)[,"dist"],ties.method="random")
  } # crea una lista de rangos (por distancia) para cada niño dentro del cluster de pertenencia 
  demanda$orden_dist<-unlist(lista_1) # asigna el rango a la base de niños
  remove(i,lista_1)
  demanda$a_reasig<-ifelse(demanda$dist<=distancia,
                           ifelse(demanda$orden_dist<=tam,0,1),1) # aquellos cuyo rango es mayor que la cantidad de cupoos disponibles debe ser reasignado en otro paso
  clusters<-subset(demanda,demanda$a_reasig==0)
  droplevels(clusters$cluster) 
  clusters$ronda<-as.factor(j)
  clusterizados[[j]]<-clusters
  remove(clusters)            
  demanda<-subset(demanda,demanda$a_reasig==1,select=c(x,y,pondera,id_D))
  j<-j+1
}
#Desenlistar los clusters
asignados_clusters<-as.data.frame(NULL)
for (i in 1:length(clusterizados)) {
  asignados_clusters<-rbind(asignados_clusters,as.data.frame(clusterizados[[i]]))
}
asignados_clusters<-subset(asignados_clusters,select=c(x,y,pondera,medianax,medianay,dist,ronda))
#Limpiar el ambiente
remove(j,g1,g2,d1,d2,medianax,medianay,lista_cluster,demanda,clusterizados,distancia,i,k,l,m,o,tam)

